AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Specification template describing your function.
Resources:
  PlayersAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: url-shorten-service-api-prd
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "2019-08-02T03:55:22Z"
          title: "url-shrt-API-prd"
        basePath: "/default"
        schemes:
        - "https"
        paths:
          /index:
            get:
              produces:
              - "text/html"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${urlshortenpage.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      text/html: "$input.path('$')"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          /shorten:
            post:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${urlshortener.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            # options:
            #   consumes:
            #   - "application/json"
            #   produces:
            #   - "application/json"
            #   responses:
            #     "200":
            #       description: "200 response"
            #       schema:
            #         $ref: "#/definitions/Empty"
            #       headers:
            #         Access-Control-Allow-Origin:
            #           type: "string"
            #         Access-Control-Allow-Methods:
            #           type: "string"
            #         Access-Control-Allow-Headers:
            #           type: "string"
          /t/{urlid}:
            get:
              consumes:
              - "application/json"
              parameters:
              - name: "urlid"
                in: "path"
                required: true
                type: "string"
              responses:
                "301":
                  description: "301 response"
                  headers:
                    Location:
                      type: "string"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${accessshorturl.Arn}/invocations"
                responses:
                  default:
                    statusCode: "301"
                    responseParameters:
                      method.response.header.Location: "integration.response.body.location"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "{\n    \"urlid\": \"$input.params('urlid')\"\n}"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
        securityDefinitions:
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
  urlshortener:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: url-shortener-prd 
      Handler: url-shortener.lambda_handler
      Runtime: python3.7
      CodeUri: ./
      Description: ''
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::042792648150:role/service-role/url-shortener-role-gmwupkfc'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlayersAPI
            Path: /shorten
            Method: POST
      Environment:
        Variables:
          APP_URL: 'https://rqw25xitul.execute-api.us-east-2.amazonaws.com/default/t/'
          MAX_CHAR: '10'
          MIN_CHAR: '5'
  urlshortenpage:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: url-shorten-page-prd
      Handler: url-shorten-page.lambda_handler
      Runtime: python3.7
      CodeUri: ./
      Description: ''
      MemorySize: 128
      Timeout: 3
      Role: >-
        arn:aws:iam::042792648150:role/service-role/url-shorten-page-role-4jfjr6k2
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlayersAPI
            Path: /index
            Method: GET
  accessshorturl:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: access-short-url-prd
      Handler: access-short-url.lambda_handler
      Runtime: python3.7
      CodeUri: ./
      Description: ''
      MemorySize: 128
      Timeout: 3
      Role: >-
        arn:aws:iam::042792648150:role/service-role/access_short_url-role-yub9wxhn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlayersAPI
            Path: '/t/{urlid}'
            Method: GET
